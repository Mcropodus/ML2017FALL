# -*- coding: UTF-8 -*-

import pyaudio, wave
import numpy as np
import scipy.io.wavfile as wf

# 相關設定

# 音框/s
CHUNK = 1024
# 取樣率
RATE = 16200
# 聲道
CHANNELS = 2
# 秒數
SECONDS = 0.5
#振幅
A = 20

def FreModulation(f):
    result = []
    data = RATE*SECONDS
    for i in np.arange(RATE*SECONDS):
        result = np.cos(2*np.pi*f*SECONDS)
        f += (data*100)
        data -= 1
    return result

def FreSpecify(f):
    data = []
    data = (A*np.sin(2*np.pi*f/RATE*np.array(np.arange(RATE*SECONDS)))).astype(np.float32)
    return data

a1 = [131,147,165,175,196,220,247] #4
a2 = [33,37,41,44,49,55,62] #2

#f1 = [Data(a1[0]), Data(a1[1]), Data(a1[2]), Data(a1[3]), Data(a1[4]), Data(a1[5]), Data(a1[6])]
#f2 = [Data(a2[0]), Data(a2[1]), Data(a2[2]), Data(a2[3]), Data(a2[4]), Data(a2[5]), Data(a2[6])]

music1 = []
music1.extend(FreSpecify(a1[0]))
music1.extend(FreSpecify(a1[0]))
music1.extend(FreSpecify(a1[4]))
music1.extend(FreSpecify(a1[4]))
music1.extend(FreSpecify(a1[5]))
music1.extend(FreSpecify(a1[5]))
music1.extend(FreSpecify(a1[4]))
music1.extend(FreSpecify(a1[4]))
music1.extend(FreSpecify(a1[3]))
music1.extend(FreSpecify(a1[3]))
music1.extend(FreSpecify(a1[2]))
music1.extend(FreSpecify(a1[2]))
music1.extend(FreSpecify(a1[1]))
music1.extend(FreSpecify(a1[1]))
music1.extend(FreSpecify(a1[0]))


music2 = []
music2.extend(FreSpecify(a2[0]))
music2.extend(FreSpecify(a2[0]))
music2.extend(FreSpecify(a2[4]))
music2.extend(FreSpecify(a2[4]))
music2.extend(FreSpecify(a2[5]))
music2.extend(FreSpecify(a2[5]))
music2.extend(FreSpecify(a2[4]))
music2.extend(FreSpecify(a2[4]))
music2.extend(FreSpecify(a2[3]))
music2.extend(FreSpecify(a2[3]))
music2.extend(FreSpecify(a2[2]))
music2.extend(FreSpecify(a2[2]))
music2.extend(FreSpecify(a2[1]))
music2.extend(FreSpecify(a2[1]))
music2.extend(FreSpecify(a2[0]))

music_mix = []

for i in range(len(music1)):
    music_mix.extend([music1[i],music2[i]])

#print music_mix

#data = (A * np.sin(2 * np.pi * a1[0]/RATE * np.array(range(16200*SECONDS)))).astype(np.float32)
#wf.write('test.wav',RATE,data)
wf.write('test.wav', RATE, np.array(music_mix))


