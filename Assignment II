# -*- coding: UTF-8 -*-

import pyaudio, wave
import numpy as np
import scipy.io.wavfile as wf

# 相關設定

# 音框/s
CHUNK = 1024
# 取樣率
RATE = 16200
# 聲道
CHANNELS = 2
# 秒數
SECONDS = 0.5
#振幅
A = 20



def FreModulation(f, Data):
    # result = []
    # for i in range(10):
    #     result[i] = np.sin(2*np.pi*f*np.cos(2*np.pi*Data*i)/RATE*i).astype(np.float32)

    data = []
    T = np.array(np.arange(RATE*SECONDS))
    F = f/RATE
    data = (A*np.cos(2*np.pi*F*T)).astype(np.float32)
    return data

def FreSpecify(f):
    data = []
    F = f/RATE
    T = np.array(np.arange(RATE*SECONDS))
    data = (A*np.sin(2*np.pi*F*T)).astype(np.float32)
    return data

a1 = [262,294,330,349,392,440,494] #4
a2 = [65,73,82,87,98,110,124] #2

#f1 = [Data(a1[0]), Data(a1[1]), Data(a1[2]), Data(a1[3]), Data(a1[4]), Data(a1[5]), Data(a1[6])]
#f2 = [Data(a2[0]), Data(a2[1]), Data(a2[2]), Data(a2[3]), Data(a2[4]), Data(a2[5]), Data(a2[6])]

music1 = []
music1.extend(FreSpecify(a1[0]))
music1.extend(FreSpecify(a1[0]))
music1.extend(FreSpecify(a1[4]))
music1.extend(FreSpecify(a1[4]))
music1.extend(FreSpecify(a1[5]))
music1.extend(FreSpecify(a1[5]))
music1.extend(FreSpecify(a1[4]))
music1.extend(FreSpecify(a1[4]))
music1.extend(FreSpecify(a1[3]))
music1.extend(FreSpecify(a1[3]))
music1.extend(FreSpecify(a1[2]))
music1.extend(FreSpecify(a1[2]))
music1.extend(FreSpecify(a1[1]))
music1.extend(FreSpecify(a1[1]))
music1.extend(FreSpecify(a1[0]))


music2 = []
music2.extend(FreSpecify(a2[0]))
music2.extend(FreSpecify(a2[0]))
music2.extend(FreSpecify(a2[4]))
music2.extend(FreSpecify(a2[4]))
music2.extend(FreSpecify(a2[5]))
music2.extend(FreSpecify(a2[5]))
music2.extend(FreSpecify(a2[4]))
music2.extend(FreSpecify(a2[4]))
music2.extend(FreSpecify(a2[3]))
music2.extend(FreSpecify(a2[3]))
music2.extend(FreSpecify(a2[2]))
music2.extend(FreSpecify(a2[2]))
music2.extend(FreSpecify(a2[1]))
music2.extend(FreSpecify(a2[1]))
music2.extend(FreSpecify(a2[0]))

music_mix = []

for i in range(len(music1)):
    music_mix.extend([music1[i],music2[i]])

#print music_mix

#data = (A * np.sin(2 * np.pi * a1[0]/RATE * np.array(range(16200*SECONDS)))).astype(np.float32)
#wf.write('test.wav',RATE,data)
wf.write('test.wav', RATE, np.array(music_mix))

FreMod = []
FreMod1 = []
FreMod2 = []

mel = [0,0,4,4,5,5,4,4,3,3,2,2,1,1,0]


for i in mel:
    FreMod.extend(FreModulation(a1[i],100))
for i in mel:
    FreMod1.extend(FreModulation(a1[i],500))
for i in mel:
    FreMod2.extend(FreModulation(a1[i],800))

a = np.array(music1)
b1 = np.array(FreMod)
b2 = np.array(FreMod1)
b3 = np.array(FreMod2)

m1 = np.multiply(a,b1)
m2 = np.multiply(a,b2)
m3 = np.multiply(a,b3)

wf.write('OM.wav',RATE,a)
wf.write('FM100.wav',RATE,m1)
wf.write('FM500.wav',RATE,m2)
wf.write('FM800.wav',RATE,m3)
